-- *** DO NOT EDIT! ***
-- This module is generated by ./script/generate-options.sh

module JS.Intl.Options.RoundingMode
  ( RoundingMode(..)
  , fromString
  , toString
  ) where

import Prelude

import Data.Maybe (Maybe(..))

data RoundingMode
  = Ceil
  | Floor
  | Expand
  | Trunc
  | HalfCeil
  | HalfFloor
  | HalfExpand
  | HalfTrunc
  | HalfEven

derive instance Eq RoundingMode

toString :: RoundingMode -> String
toString = case _ of
  Ceil -> "ceil"
  Floor -> "floor"
  Expand -> "expand"
  Trunc -> "trunc"
  HalfCeil -> "halfCeil"
  HalfFloor -> "halfFloor"
  HalfExpand -> "halfExpand"
  HalfTrunc -> "halfTrunc"
  HalfEven -> "halfEven"

fromString :: String -> Maybe RoundingMode
fromString = case _ of
  "ceil" -> Just Ceil
  "floor" -> Just Floor
  "expand" -> Just Expand
  "trunc" -> Just Trunc
  "halfCeil" -> Just HalfCeil
  "halfFloor" -> Just HalfFloor
  "halfExpand" -> Just HalfExpand
  "halfTrunc" -> Just HalfTrunc
  "halfEven" -> Just HalfEven
  _ -> Nothing
